<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>网络七层模型</title>
      <link href="/2018/10/12/%E7%BD%91%E7%BB%9C%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B/"/>
      <url>/2018/10/12/%E7%BD%91%E7%BB%9C%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B/</url>
      <content type="html"><![CDATA[<p><img src="/2018/10/12/网络七层模型/12.png" alt="12"></p><p>OSI七层模式简单通俗理解</p><p>这个模型学了好多次，总是记不住。今天又看了一遍，发现用历史推演的角度去看问题会更有逻辑，更好记。本文不一定严谨，可能有错漏，主要是抛砖引玉，帮助记性不好的人。总体来说，OSI模型是从底层往上层发展出来的。</p><p>这个模型推出的最开始，是是因为美国人有两台机器之间进行通信的需求。</p><p>需求1：</p><p>科学家要解决的第一个问题是，两个硬件之间怎么通信。具体就是一台发些比特流，然后另一台能收到。</p><p>于是，科学家发明了物理层：</p><p>主要定义物理设备标准，如网线的接口类型、光纤的接口类型、各种传输介质的传输速率等。它的主要作用是传输比特流(就是由1、0转化为电流强弱来进行传输，到达目的地后在转化为1、0，也就是我们常说的数模转换与模数转换)。这一层的数据叫做比特。</p><p>需求2：</p><p>现在通过电线我能发数据流了，但是，我还希望通过无线电波，通过其它介质来传输。然后我还要保证传输过去的比特流是正确的，要有纠错功能。</p><p>于是，发明了数据链路层：</p><p>定义了如何让格式化数据以进行传输，以及如何让控制对物理介质的访问。这一层通常还提供错误检测和纠正，以确保数据的可靠传输。</p><p>需求3：</p><p>现在我能发正确的发比特流数据到另一台计算机了，但是当我发大量数据时候，可能需要好长时间，例如一个视频格式的，网络会中断好多次（事实上，即使有了物理层和数据链路层，网络还是经常中断，只是中断的时间是毫秒级别的）。</p><p>那么，我还须要保证传输大量文件时的准确性。于是，我要对发出去的数据进行封装。就像发快递一样，一个个地发。</p><p>于是，先发明了传输层（传输层在OSI模型中，是在网络层上面）</p><p>例如TCP，是用于发大量数据的，我发了1万个包出去，另一台电脑就要告诉我是否接受到了1万个包，如果缺了3个包，就告诉我是第1001，234，8888个包丢了，那我再发一次。这样，就能保证对方把这个视频完整接收了。</p><p>例如UDP，是用于发送少量数据的。我发20个包出去，一般不会丢包，所以，我不管你收到多少个。在多人互动游戏，也经常用UDP协议，因为一般都是简单的信息，而且有广播的需求。如果用TCP，效率就很低，因为它会不停地告诉主机我收到了20个包，或者我收到了18个包，再发我两个！如果同时有1万台计算机都这样做，那么用TCP反而会降低效率，还不如用UDP，主机发出去就算了，丢几个包你就卡一下，算了，下次再发包你再更新。</p><p>TCP协议是会绑定IP和端口的协议，下面会介绍IP协议。</p><p>需求4：</p><p>传输层只是解决了打包的问题。但是如果我有多台计算机，怎么找到我要发的那台？或者，A要给F发信息，中间要经过B，C，D,E，但是中间还有好多节点如K.J.Z.Y。我怎么选择最佳路径？这就是路由要做的事。</p><p>于是，发明了网络层。即路由器，交换价那些具有寻址功能的设备所实现的功能。这一层定义的是IP地址，通过IP地址寻址。所以产生了IP协议。</p><p>需求5：</p><p>现在我们已经保证给正确的计算机，发送正确的封装过后的信息了。但是用户级别的体验好不好？难道我每次都要调用TCP去打包，然后调用IP协议去找路由，自己去发？当然不行，所以我们要建立一个自动收发包，自动寻址的功能。</p><p>于是，发明了会话层。会话层的作用就是建立和管理应用程序之间的通信。</p><p>需求6：</p><p>现在我能保证应用程序自动收发包和寻址了。但是我要用Linux给window发包，两个系统语法不一致，就像安装包一样，exe是不能在linux下用的，shell在window下也是不能直接运行的。于是需要表示层（presentation），帮我们解决不同系统之间的通信语法问题。</p><p>需求7：</p><p>OK，现在所有必要条件都准备好了，我们可以写个android程序，web程序去实现需求把。</p><p>补充：</p><p>Socket：</p><p>这不是一个协议，而是一个通信模型。其实它最初是伯克利加州分校软件研究所，简称BSD发明的，主要用来一台电脑的两个进程间通信，然后把它用到了两台电脑的进程间通信。所以，可以把它简单理解为进程间通信，不是什么高级的东西。主要做的事情不就是：</p><p>A发包：发请求包给某个已经绑定的端口（所以我们经常会访问这样的地址182.13.15.16:1235，1235就是端口）；收到B的允许；然后正式发送；发送完了，告诉B要断开链接；收到断开允许，马上断开，然后发送已经断开信息给B。</p><p>B收包：绑定端口和IP；然后在这个端口监听；接收到A的请求，发允许给A，并做好接收准备，主要就是清理缓存等待接收新数据；然后正式接收；接受到断开请求，允许断开；确认断开后，继续监听其它请求。</p><p>可见，Socket其实就是I/O操作。Socket并不仅限于网络通信。在网络通信中，它涵盖了网络层、传输层、会话层、表示层、应用层——其实这都不需要记，因为Socket通信时候用到了IP和端口，仅这两个就表明了它用到了网络层和传输层；而且它无视多台电脑通信的系统差别，所以它涉及了表示层；一般Socket都是基于一个应用程序的，所以会涉及到会话层和应用层。</p><p>mac协议和路由协议正确的关系用通俗易懂的方式可以这么来理解：<br>\1. 你现在有封信，要从北京发到上海去，你的任务仅仅是把新的内容编辑好，然后交给邮局，其他的事你不用管，你在写信的这个过程就相当于是工作在<strong>应用层</strong>；<br>\2. 路由协议：邮局收到信以后，看到信封上写着邮编，这就好比是发送目标的<a href="https://www.baidu.com/s?wd=IP&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao" target="_blank" rel="noopener">IP</a>地址。虽说是条条大路通罗马，从北京向北穿过北极到达美国，从美国向南绕过南极最终到达上海是一条路线，从北京经过蒙古直达欧洲，再从欧洲向西大西洋横穿美国最后从太平洋到达上海也是一条路线，路由协议就决定我到底应该走哪条路线把你的信从北京送到上海<strong>。路由协议**</strong>存在于OSI七层结构的<strong><strong>网络层</strong></strong>，<strong>通过这个协议，最终确立了你的信去上海应该经过的路径，比如，从北京先到石家庄，再从石家庄到南京，最终从南京到上海，而不是之前说的那两条路径；<br>\3. mac协议：这个</strong>协议决定了从一站到另一站到底该怎么走<strong>，具体来说，信怎么从北京到达石家庄？mac协议告诉送信邮政，得先找一辆没有满载的汽车，然后把信放在车上发送出去，如果货车都满载了找不到汽车，则应该继续去找没有满载的火车，然后把信送往石家庄。这是mac协议要做的事情。所以很清楚的是，</strong>mac协议存在于路由协议的下层。**</p><hr><p>MAC协议决定了节点什么时候允许发送分组，而且通常控制对<a href="https://baike.baidu.com/item/%E7%89%A9%E7%90%86%E5%B1%82/4329158" target="_blank" rel="noopener">物理层</a>的所有访问。</p><p><strong>以太网**</strong>MAC协议–CSMA/CD协议<strong>**</strong></p><p><img src="/2018/10/12/网络七层模型/22.gif" alt="22"></p>]]></content>
      
      
        <tags>
            
            <tag> 整理 网络 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>c/c++学习路线</title>
      <link href="/2018/10/10/c-c-%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/"/>
      <url>/2018/10/10/c-c-%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/</url>
      <content type="html"><![CDATA[<h1 id="C-C-学习路线"><a href="#C-C-学习路线" class="headerlink" title="C/C++学习路线"></a><a href="https://www.cnblogs.com/chengjian-physique/p/8076346.html" target="_blank" rel="noopener">C/C++学习路线</a></h1><p>随着互联网及互联网+深入蓬勃的发展，经过40余年的时间洗礼，C/C++俨然已成为一门贵族语言，出色的性能使之成为高级语言中的性能王者。而在今天，它又扮演着什么样重要的角色呢？请往下看：</p><p>后端服务器，移动互联网后端，经典Windows界面开发，移动互联网端界面开发，跨平台界面开发，图形分析，系统架构，应用设计，还有现在最为流行的分布架构等一些新的技术领域。</p><p> 这么牛的语言，你是不是想知道怎样学习和掌握它呢？接下来请看经过小编整理过C/C++工程师必备知识的思维导图。</p><p><img src="/2018/10/10/c-c-学习路线/1.png" alt="1"></p><p>初学者看到这么密集的知识点，是不是有点眼晕呢？的确，C/C++是一门知识面覆盖很广的学科。想学好C/C++的你并不需要慌张，内容虽多，但依然有法可依。只要有足够的耐心和毅力，加上正确的学习方法，就不怕你学不好C/C++。</p><p>既然如此，C/C++开发到底需要学些什么呢，又应该怎么学呢？接下来由黑马程序员C/C++学院教你如何从零基础学习C/C++开发，快速进入牛人之列，掌握这门贵族语言。</p><p><strong>一、初级入门阶段</strong></p><p>在入门之初，首先要做的是通过C/C++语言的学习培养编程思维和动手能力，深刻理解面向过程和面向对象的思想方法。这个阶段你需要学习：</p><p><strong>① C语言</strong></p><p>数据类型、变量、内存布局、指针基础；</p><p>字符串、一维数组、二维数组；</p><p>一级指针，二级指针，三级指针，N级指针概念，指针数组和数组指针；</p><p>结构体、文件的使用；</p><p>动态库的封装和设计；</p><p>函数指针回调函数。</p><p> <strong>② C++语言</strong></p><p>面向对象编程思想；</p><p>类的封装，构造和析构、静态成员、对象管理；</p><p>类的构造(有参构造函数、无参构造、拷贝构造、默认构造函数)和析构；</p><p>对象动态管理、友元函数、友元类、操作符重载；</p><p>C++编译器对象管理模型分析；</p><p>类对象的动态管理(new/delete)；</p><p>友元函数和友元类；</p><p>运算符重载(一元运算符、二元运算符、运算符重载难点、项目开发中的运算符重载)；</p><p>类的继承、多继承及其二义性、虚继承；</p><p>多态(概念、意义、原理剖析、多态案例)；</p><p>虚函数、纯虚函数、抽象类(面向抽象类编程思想案例)；</p><p>函数模板、类模板，模板的继承；</p><p>C++类型转换；</p><p>C++输入输出流(标准I/O 文件I/O 字符流I/O)；</p><p>C++异常处理(异常机制、异常类型、异常变量、异常层次结构、标准异常库)；</p><p><strong>③ 常**</strong>见常用的IDE开发工具**</p><p>诸如Windows平台VC系列：VC++6.0(比较古老) ；Visual Studio2013, Visual Studio2015；Mac平台的XCode系列，还有CodeBlock，另附一些高级编辑器Notepad++, EditPlus,UE等一些开发工具的常用设置和一些常见快捷键的使用。</p><p>此阶段的学习难度系数不大，掌握这些内容之后，可以做些简单的小项目。当然了如果你想用这些技能找工作的话确实是比较困难的。这时你还应该在加把劲进一步学习第二阶段。</p><p><strong>二、C/C++开发进阶</strong></p><p>这一阶段的目标才是达到C/C++软件工程师开发行业的基本要求，这个阶段是我们走向C/C++开发的进阶之路，更是一个让自己找份薪水比较体面的工作的筹码。</p><p>如果在此部分遇到不懂的或者没有见过的知识点和名词，可先将本文收藏，供以后细细研读。</p><p>那么这个阶段，我们又应该掌握什么呢，继续往下看：</p><p><strong>①   **</strong> C++<strong>**进阶之STL</strong></p><p>STL = Standard Template Library，即标准模板库。这是提高开发效率的极品工具。通过学习此阶段，应掌握泛型编程技巧，理解容器类在C++语言中的应用模式，以及熟练掌握全部STL类的使用方法。</p><p><strong>②   **</strong> C++<strong>**进阶之设计模式</strong></p><p>决定一个项目成败最重要的因素是项目总体的设计，通过本阶段的学习，可掌握面向对象编程中重要的一环，是编码前建模的技巧所在。单例模式；工厂模式；代理模式；迭代模式等，这些都是你要掌握的哦。</p><p><strong>③   **</strong> C++<strong>**进阶之数据结构基础</strong></p><p>这是所有编程语言中最应该学习的部分，程序组成的基础之一。</p><p>顺序存储、链式存储、循环链表；</p><p>双向链表、栈(顺序和链式)、队列(顺序和链式)；</p><p>栈的应用、树基本概念及遍历、二叉树；</p><p>排序算法、并归算法、选择、插入、快速、希尔。</p><p>以上这些内容你知道吗?</p><p><strong>④   **</strong> C++<strong>**进阶之UI界面开发</strong></p><p>掌握QT类库构架，图形界面开发模型；</p><p>掌握QT开发技巧，消息机制，图形处理；</p><p>掌握QT网络编程，UDP，TCP使用方式；</p><p>掌握QT文件处理方式，序列化；</p><p>掌握QT在windows，linux，ios，android不同平台下的移植技术。</p><p><strong>⑤   **</strong> C++<strong>**进阶之Unix/Linux网络服务器</strong></p><p>掌握Unix/Linux平台开发方式；</p><p>熟练使用系统调用；</p><p>熟练Unix/Linux内存管理，进程，线程调度；</p><p>熟悉网络服务器开发方式，熟练编写TCP，UCP网络服务程序；</p><p>掌握同步/异步IO模型在网络编程中的使用方式。</p><p><strong>⑥ C++进阶之数据库开发</strong></p><p>掌握SQL语言的实用技巧。Oracle,MySQL数据库的使用方式。</p><p>如果你能熟练掌握以上列出的技能，具备解决复杂问题和技术难点的能力，而且你能独立开发一些比较复杂的功能模块，那么很荣幸地告诉你，你已经达到中级水平，薪资过万对你来说简直是小菜一碟。</p><p><strong>三、C++开发高级 </strong></p><p>读到此处的你，相信你有更高的目标。即是当下炙手可热的全栈开发工程师，既晓前端，又通后台。快速定位问题，解决问题对他们来说已是小菜一碟，就是人们常说的神秘大牛，只在公司技术攻关的时候才会才看到他们的身影。</p><p>①此阶段软件开发工作所需的知识和技能相对较难，高级软件工程师编码熟练度和规范性需要达到一定要求；</p><p>②具备一定的项目能力(包括调试能力、文档编写能力、测试能力等)和综合技术素质(包括对软件生命周期的理解、对设计模式的理解、必备的行业知识和经验等)；.</p><p>③了解主流的后台技术和前后端协作方式，能从全局角度理解项目的整个生命周期。</p><p>如果你能熟练掌握以上三个阶段的知识技能,那么你就可以满足C++开发行业的高级需求。</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>LeetCode 7反转整数</title>
      <link href="/2018/09/18/LeetCode-7%E5%8F%8D%E8%BD%AC%E6%95%B4%E6%95%B0/"/>
      <url>/2018/09/18/LeetCode-7%E5%8F%8D%E8%BD%AC%E6%95%B4%E6%95%B0/</url>
      <content type="html"><![CDATA[]]></content>
      
      
    </entry>
    
    <entry>
      <title>沐20180730Plan_LTS</title>
      <link href="/2018/07/30/%E6%B2%9020180730Plan/"/>
      <url>/2018/07/30/%E6%B2%9020180730Plan/</url>
      <content type="html"><![CDATA[<p><img src="/2018/07/30/沐20180730Plan/P1.jpg" alt="P1"></p><h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>Summary time：2018 07 30 19:36</p><p>Aim:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>完成遗留的任务，主要指导师部分的。</span><br><span class="line"><span class="number">2.</span>完成代号沐文的工作</span><br><span class="line"><span class="number">3.</span>习惯的养成</span><br><span class="line"><span class="number">4.</span>健身</span><br><span class="line"><span class="number">5.</span>吉他</span><br><span class="line"><span class="number">6.</span>工作方向</span><br><span class="line"><span class="number">7.</span>etc</span><br></pre></td></tr></table></figure><h1 id="Recent-mission"><a href="#Recent-mission" class="headerlink" title="Recent mission"></a>Recent mission</h1><p>西安项目—-需求报告完善—开发文档完善–实施文档暂定</p><p>专利交底书书写</p><p>沐文zigbee无线传感器设计</p><p>小论文写作—&gt;目前不太急迫</p><hr><p>；】】健身——-&gt;习惯</p><p>吉他  ——&gt;修身</p><p>跨界读书 —–读书笔记—-&gt;习惯</p><p>早睡早起 —&gt;习惯养成训练</p><hr><p>独立思考</p><p>学会投资</p><hr><p>工作方向</p><hr><h1 id="Specific-plan"><a href="#Specific-plan" class="headerlink" title="Specific plan"></a>Specific plan</h1>]]></content>
      
      <categories>
          
          <category> Personal, </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Plan </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>LeetCode-No.6 Z字形变换</title>
      <link href="/2018/07/10/LeetCode-No-6-Z%E5%AD%97%E5%BD%A2%E5%8F%98%E6%8D%A2/"/>
      <url>/2018/07/10/LeetCode-No-6-Z%E5%AD%97%E5%BD%A2%E5%8F%98%E6%8D%A2/</url>
      <content type="html"><![CDATA[<p>将字符串 <code>&quot;PAYPALISHIRING&quot;</code> 以Z字形排列成给定的行数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">P   A   H   N</span><br><span class="line">A P L S I I G</span><br><span class="line">Y   I   R</span><br></pre></td></tr></table></figure><p>之后从左往右，逐行读取字符：<code>&quot;PAHNAPLSIIGYIR&quot;</code></p><p>实现一个将字符串进行指定行数变换的函数:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string convert(string s, int numRows);</span><br></pre></td></tr></table></figure><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;PAYPALISHIRING&quot;, numRows = 3</span><br><span class="line">输出: &quot;PAHNAPLSIIGYIR&quot;</span><br><span class="line"></span><br><span class="line">输入: s = &quot;PAYPALISHIRING&quot;, numRows = 4</span><br><span class="line">输出: &quot;PINALSIGYAHRPI&quot;</span><br><span class="line">解释:</span><br><span class="line"></span><br><span class="line">P     I    N</span><br><span class="line">A   L S  I G</span><br><span class="line">Y A   H R</span><br><span class="line">P     I</span><br></pre></td></tr></table></figure><h1 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">convert</span><span class="params">(<span class="built_in">string</span> s, <span class="keyword">int</span> numRows)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="built_in">string</span>  result=<span class="string">""</span>;; </span><br><span class="line">   <span class="built_in">string</span> *p=<span class="keyword">new</span> <span class="built_in">string</span>[numRows];</span><br><span class="line">   <span class="built_in">string</span> tmp=<span class="string">"a"</span>;</span><br><span class="line">   <span class="keyword">int</span> num=<span class="number">0</span>; </span><br><span class="line">   <span class="keyword">int</span> step=numRows+(numRows<span class="number">-2</span>);<span class="comment">//numRows&gt;2</span></span><br><span class="line">   <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">   <span class="keyword">while</span>(i&lt;s.size())</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;numRows&amp;&amp;i&lt;s.size();j++)</span><br><span class="line">      &#123;</span><br><span class="line">        tmp[<span class="number">0</span>]=s[i++];</span><br><span class="line">        p[j]=p[j]+tmp;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> j=numRows<span class="number">-2</span>;j&gt;<span class="number">0</span>&amp;&amp;i&lt;s.size();j--)</span><br><span class="line">      &#123;</span><br><span class="line">        tmp[<span class="number">0</span>]=s[i++];</span><br><span class="line">        p[j]=p[j]+tmp;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;numRows;i++)</span><br><span class="line">    &#123;</span><br><span class="line">    result+=p[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> test=<span class="string">"PAYPALISHIRING"</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;convert(test,<span class="number">4</span>)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1>]]></content>
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>LeetCode-No.5 最长回文子串</title>
      <link href="/2018/07/09/LeetCode-No-5-%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/"/>
      <url>/2018/07/09/LeetCode-No-5-%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/</url>
      <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为1000。</span><br></pre></td></tr></table></figure><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: &quot;babad&quot;</span><br><span class="line">输出: &quot;bab&quot;</span><br><span class="line">注意: &quot;aba&quot;也是一个有效答案。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: &quot;cbbd&quot;</span><br><span class="line">输出: &quot;bb&quot;</span><br></pre></td></tr></table></figure><h1 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">/*给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为1000。*/</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">longestPalindrome</span><span class="params">(<span class="built_in">string</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> result=<span class="string">""</span>,finresult;</span><br><span class="line"><span class="keyword">int</span> max=<span class="number">0</span>; </span><br><span class="line"><span class="built_in">string</span> tmpa=<span class="string">"a"</span>; </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.size();i++)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">int</span> step=<span class="number">1</span>;</span><br><span class="line">  tmpa[<span class="number">0</span>]=s[i];</span><br><span class="line">  result=tmpa;</span><br><span class="line">  <span class="keyword">while</span>((i-step&gt;=<span class="number">0</span>)&amp;&amp;(i+step&lt;s.size()))</span><br><span class="line">  &#123;</span><br><span class="line">   <span class="keyword">if</span>(s[i-step]==s[i+step])</span><br><span class="line">   &#123;  </span><br><span class="line">     </span><br><span class="line">   tmpa[<span class="number">0</span>]=s[i-step]; </span><br><span class="line">   result=tmpa+result+tmpa; </span><br><span class="line">   step++;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">   &#123;</span><br><span class="line">   <span class="keyword">if</span>(step&gt;max)</span><br><span class="line">   &#123; </span><br><span class="line">   finresult=result;</span><br><span class="line">   max=step;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">break</span>;</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(step&gt;max)</span><br><span class="line">    &#123; </span><br><span class="line">    finresult=result;</span><br><span class="line">   max=step;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;   </span><br><span class="line"><span class="keyword">int</span> maxlen=<span class="number">2</span>*max<span class="number">-1</span>;   </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.size();i++)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">int</span> step=<span class="number">0</span>;</span><br><span class="line">  result=<span class="string">""</span>;</span><br><span class="line">  <span class="keyword">while</span>((i-step&gt;=<span class="number">0</span>)&amp;&amp;(i+<span class="number">1</span>+step&lt;s.size()))</span><br><span class="line">  &#123;</span><br><span class="line">   <span class="keyword">if</span>(s[i-step]==s[i+<span class="number">1</span>+step])</span><br><span class="line">   &#123;   </span><br><span class="line">   tmpa[<span class="number">0</span>]=s[i-step];</span><br><span class="line">   result=tmpa+result+tmpa; </span><br><span class="line">      step++;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">   &#123;</span><br><span class="line">   <span class="keyword">if</span>(<span class="number">2</span>*step&gt;maxlen)</span><br><span class="line">   &#123;</span><br><span class="line">   finresult=result;</span><br><span class="line">   maxlen=<span class="number">2</span>*step;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">break</span>;</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(<span class="number">2</span>*step&gt;maxlen)</span><br><span class="line">   &#123;</span><br><span class="line">   finresult=result;</span><br><span class="line">   maxlen=<span class="number">2</span>*step;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> finresult;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">string</span> test=<span class="string">"aa"</span>; </span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;longestPalindrome(test)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><h4 id="Manacher-算法（更优的一种算法"><a href="#Manacher-算法（更优的一种算法" class="headerlink" title="Manacher 算法（更优的一种算法)"></a>Manacher 算法（更优的一种算法)</h4><p>复杂度为 O(n) </p><p>参考链接<a href="http://articles.leetcode.com/longest-palindromic-substring-part-ii/" target="_blank" rel="noopener">http://articles.leetcode.com/longest-palindromic-substring-part-ii/</a></p><p>其他解法</p><p><a href="https://leetcode-cn.com/problems/longest-palindromic-substring/solution/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/longest-palindromic-substring/solution/</a></p>]]></content>
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>微信小程序学习开发实践</title>
      <link href="/2018/07/09/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AD%A6%E4%B9%A0%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5/"/>
      <url>/2018/07/09/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AD%A6%E4%B9%A0%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5/</url>
      <content type="html"><![CDATA[<h1 id="Why-use-WeChat-applet？"><a href="#Why-use-WeChat-applet？" class="headerlink" title="Why use WeChat applet？"></a>Why use WeChat applet？</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">用完即走，无需下载安装</span><br><span class="line">最初微信小程序规定源代码大小不能超过2M，现在不能超过10M </span><br><span class="line">对于前端开发而言，微信小程序因为其简单快速、开发成本低、用户流量巨大等特点，也就成了前端开发工程师必会的一个技能。</span><br></pre></td></tr></table></figure><h1 id="Learning-record"><a href="#Learning-record" class="headerlink" title="Learning record"></a>Learning record</h1><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>注册（<a href="https://mp.weixin.qq.com）" target="_blank" rel="noopener">https://mp.weixin.qq.com）</a></p><p>安装开发工具（<a href="https://developers.weixin.qq.com/miniprogram/dev/index.html" target="_blank" rel="noopener">https://developers.weixin.qq.com/miniprogram/dev/index.html</a>）</p><p>学习文档（<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/structure.html）最好的资料就是官方文档" target="_blank" rel="noopener">https://developers.weixin.qq.com/miniprogram/dev/framework/structure.html）最好的资料就是官方文档</a></p><p>从事过网页编程的人知道，网页编程采用的是 HTML + CSS + JS 这样的组合，其中 HTML 是用来描述当前这个页面的结构，CSS 用来描述页面的样子，JS 通常是用来处理这个页面和用户的交互。</p><p>其中</p><p>WXML =html</p><p>WXSS =CSS</p><h2 id="微信小程序通过api接口将json数据展现到小程序示例"><a href="#微信小程序通过api接口将json数据展现到小程序示例" class="headerlink" title="微信小程序通过api接口将json数据展现到小程序示例"></a>微信小程序通过api接口将json数据展现到小程序示例</h2><p>要知道怎么通过知乎新闻的接口，来把数据展示到微信小程序端上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wx.request 请求接口资源（微信小程序api中的发起请求部分） </span><br><span class="line">swiper 实现轮播图的组件 </span><br><span class="line">wx:for 循环语句 </span><br><span class="line">微信小程序的基础知识</span><br></pre></td></tr></table></figure><p>请求函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">wx.request(&#123;</span><br><span class="line"> url: <span class="string">'******'</span>, <span class="comment">//这里填写你的接口路径</span></span><br><span class="line"> header: &#123; <span class="comment">//这里写你借口返回的数据是什么类型，这里就体现了微信小程序的强大，直接给你解析数据，再也不用去寻找各种方法去解析json，xml等数据了</span></span><br><span class="line">  <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span></span><br><span class="line"> &#125;,</span><br><span class="line"> data: &#123;<span class="comment">//这里写你要请求的参数</span></span><br><span class="line">  x: <span class="string">''</span> ,</span><br><span class="line">  y: <span class="string">''</span></span><br><span class="line"> &#125;, </span><br><span class="line"> success: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line"> <span class="comment">//这里就是请求成功后，进行一些函数操作</span></span><br><span class="line"> <span class="built_in">console</span>.log(res.data)</span><br><span class="line"> &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>首先上一段知乎接口数据的json格式中的开头</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">"date":"20161114",</span><br><span class="line">"stories":[</span><br><span class="line"> &#123;</span><br><span class="line">  <span class="attr">"images"</span>:[</span><br><span class="line">   <span class="string">"http://jb51.net.com/76125c357aa7b0ca6c9cbc41b4a5326d.jpg"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"type"</span>:<span class="number">0</span>,</span><br><span class="line">  <span class="attr">"id"</span>:<span class="number">8975316</span>,</span><br><span class="line">  <span class="attr">"ga_prefix"</span>:<span class="string">"111422"</span>,</span><br><span class="line">  <span class="attr">"title"</span>:<span class="string">"小事 · 我和你们一样"</span></span><br><span class="line"> &#125;,</span><br><span class="line"> &#123;</span><br><span class="line">  <span class="attr">"images"</span>:[</span><br><span class="line">   <span class="string">"http://jb51.net/7c908a5940384123fd88287dbc6a2c98.jpg"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"type"</span>:<span class="number">0</span>,</span><br><span class="line">  <span class="attr">"id"</span>:<span class="number">8977438</span>,</span><br><span class="line">  <span class="attr">"ga_prefix"</span>:<span class="string">"111421"</span>,</span><br><span class="line">  <span class="attr">"title"</span>:<span class="string">"成长嘛，谁说就意味着一定要长大了？"</span></span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure><p>index.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line"> data: &#123;</span><br><span class="line">  duration: <span class="number">2000</span>,</span><br><span class="line">  indicatorDots: <span class="literal">true</span>,</span><br><span class="line">  autoplay: <span class="literal">true</span>,</span><br><span class="line">  interval: <span class="number">3000</span>,</span><br><span class="line">  loading: <span class="literal">false</span>,</span><br><span class="line">  plain: <span class="literal">false</span></span><br><span class="line"> &#125;,</span><br><span class="line"> onLoad: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> that = <span class="keyword">this</span><span class="comment">//不要漏了这句，很重要</span></span><br><span class="line"> wx.request(&#123;</span><br><span class="line">  url: <span class="string">'http://news-at.zhihu.com/api/4/news/latest'</span>,</span><br><span class="line">  headers: &#123;</span><br><span class="line">  <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//将获取到的json数据，存在名字叫zhihu的这个数组中</span></span><br><span class="line">   that.setData(&#123;</span><br><span class="line">   zhihu: res.data.stories,</span><br><span class="line">   <span class="comment">//res代表success函数的事件对，data是固定的，stories是是上面json数据中stories</span></span><br><span class="line"> </span><br><span class="line">   &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>index.wxml</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;view &gt;</span><br><span class="line">&lt;swiper indicator-dots=<span class="string">"&#123;&#123;indicatorDots&#125;&#125;"</span></span><br><span class="line"> autoplay=<span class="string">"&#123;&#123;autoplay&#125;&#125;"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"banners"</span> interval=<span class="string">"&#123;&#123;interval&#125;&#125;"</span> duration=<span class="string">"&#123;&#123;duration&#125;&#125;"</span>&gt;<span class="comment">//这里边的属性不重要，看下边</span></span><br><span class="line"> &lt;block wx:<span class="keyword">for</span>=<span class="string">"&#123;&#123;zhihu&#125;&#125;"</span>&gt;</span><br><span class="line">  &lt;swiper-item <span class="class"><span class="keyword">class</span></span>=<span class="string">"banner"</span> &gt;</span><br><span class="line">   &lt;image src=<span class="string">"&#123;&#123;item.image&#125;&#125;"</span> data-id=<span class="string">"&#123;&#123;item.b&#125;&#125;"</span> bindtap=<span class="string">"bindViewTap"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"banner-image"</span> width=<span class="string">"100%"</span> height=<span class="string">"100%"</span>/&gt;</span><br><span class="line">   &lt;text <span class="class"><span class="keyword">class</span></span>=<span class="string">"banner-title"</span>&gt;&#123;&#123;item.title&#125;&#125;&lt;<span class="regexp">/text&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>swiper-item&gt;</span><br><span class="line"> &lt;<span class="regexp">/block&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>swiper&gt;</span><br><span class="line"> </span><br><span class="line">&lt;<span class="regexp">/view&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 玩 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>二叉树的基本操作</title>
      <link href="/2018/07/03/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
      <url>/2018/07/03/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">二叉树基本操作的实现</span><br><span class="line">在主程序中编写一个简单的菜单，将有关二叉树的操作</span><br><span class="line">建立一棵二叉树的存储结构</span><br><span class="line">遍历一颗二叉数（包括层次遍历）</span><br><span class="line">统计二叉树的叶子节点的个数</span><br><span class="line">求二叉树的深度</span><br><span class="line">子树交换</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt; </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">二叉树基本操作的实现</span></span><br><span class="line"><span class="comment">在主程序中编写一个简单的菜单，将有关二叉树的操作</span></span><br><span class="line"><span class="comment">建立一棵二叉树的存储结构</span></span><br><span class="line"><span class="comment">遍历一颗二叉数（包括层次遍历）</span></span><br><span class="line"><span class="comment">统计二叉树的叶子节点的个数</span></span><br><span class="line"><span class="comment">求二叉树的深度</span></span><br><span class="line"><span class="comment">子树交换</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//=========================二叉树结构定义======================================== </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span> </span><br><span class="line">    <span class="keyword">char</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">lchild</span>,*<span class="title">rchild</span>;</span></span><br><span class="line">&#125;*BiTree,BiTNode;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//=========================先序创建二叉树========================================= </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateBiTree</span><span class="params">(BiTree &amp;T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;ch;</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">'#'</span>) T=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        T=<span class="keyword">new</span> BiTNode;</span><br><span class="line">        T-&gt;data=ch;</span><br><span class="line">        CreateBiTree(T-&gt;lchild);</span><br><span class="line">        CreateBiTree(T-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//=========================遍历一颗二叉数（包括层次遍历）========================================= </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrderTraverse</span><span class="params">(BiTree T)</span><span class="comment">//中序遍历</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T)</span><br><span class="line">    &#123;</span><br><span class="line">        InOrderTraverse(T-&gt;lchild);</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;T-&gt;data;</span><br><span class="line">        InOrderTraverse(T-&gt;rchild);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PreOrderTraverse</span><span class="params">(BiTree T)</span><span class="comment">//先序遍历</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;T-&gt;data;</span><br><span class="line">        PreOrderTraverse(T-&gt;lchild);</span><br><span class="line">        PreOrderTraverse(T-&gt;rchild);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PostOrderTraverse</span><span class="params">(BiTree T)</span><span class="comment">//后序遍历</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T)</span><br><span class="line">    &#123;</span><br><span class="line">        PostOrderTraverse(T-&gt;lchild);</span><br><span class="line">        PostOrderTraverse(T-&gt;rchild);</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;T-&gt;data;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintAtLevel</span><span class="params">(BiTree T)</span> <span class="comment">//层次遍历 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">queue</span>&lt;BiTree&gt; myqueue;</span><br><span class="line">myqueue.push(T);</span><br><span class="line"><span class="keyword">while</span> (!myqueue.empty()) &#123;</span><br><span class="line">BiTree tmp = myqueue.front();</span><br><span class="line"><span class="keyword">if</span> (tmp-&gt;lchild != <span class="literal">NULL</span>)</span><br><span class="line">myqueue.push(tmp-&gt;lchild);</span><br><span class="line"><span class="keyword">if</span> (tmp-&gt;rchild != <span class="literal">NULL</span>)</span><br><span class="line">myqueue.push(tmp-&gt;rchild);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; tmp-&gt;data;</span><br><span class="line">myqueue.pop();</span><br><span class="line">&#125;</span><br><span class="line"> <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//========================统计二叉树的叶子节点的个数============================</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LeafCount</span><span class="params">(BiTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(!T) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(!T-&gt;lchild &amp;&amp;!T-&gt;rchild)</span><br><span class="line">&#123;<span class="comment">//如果二叉树左子树和右子树皆为空,说明该二叉树根节点为叶子节点,加1.</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">return</span> LeafCount(T-&gt;lchild)+LeafCount(T-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//=========================求二叉树的深度========================================= </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Depth</span><span class="params">(BiTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(T==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> m=Depth(T-&gt;lchild);</span><br><span class="line">        <span class="keyword">int</span> n=Depth(T-&gt;rchild);</span><br><span class="line">        <span class="keyword">if</span>(m&gt;n) <span class="keyword">return</span> (m+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> (n+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//==========================子树交换(交换所有的左右子树)================================================== </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exchange</span><span class="params">(BiTree rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> BiTree temp = <span class="literal">NULL</span>;</span><br><span class="line"> <span class="keyword">if</span>(rt-&gt;lchild == <span class="literal">NULL</span> &amp;&amp; rt-&gt;rchild == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> &#123;</span><br><span class="line">       temp = rt-&gt;lchild;</span><br><span class="line">       rt-&gt;lchild = rt-&gt;rchild;</span><br><span class="line">       rt-&gt;rchild = temp;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">if</span>(rt-&gt;lchild)</span><br><span class="line">      exchange(rt-&gt;lchild);</span><br><span class="line"> <span class="keyword">if</span>(rt-&gt;rchild)</span><br><span class="line">      exchange(rt-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//===========================menu====================================================</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">menu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  system(<span class="string">"color 02"</span>);</span><br><span class="line"> <span class="built_in">cout</span>&lt;&lt;<span class="string">"======================================================主 菜 单=============================================="</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">     <span class="built_in">cout</span>&lt;&lt;<span class="string">"                           1.建立一棵二叉树            2.中序遍历"</span>&lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line">     <span class="built_in">cout</span>&lt;&lt;<span class="string">"                           3.先序遍历                  4.后序遍历"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">     <span class="built_in">cout</span>&lt;&lt;<span class="string">"                           5.层次遍历                  6.统计二叉树的叶子节点的个数"</span>&lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line">     <span class="built_in">cout</span>&lt;&lt;<span class="string">"                           7.求二叉树的深度            8.左右子树交换"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">     <span class="built_in">cout</span>&lt;&lt;<span class="string">"                                       Notice: Ctrl+c结束程序"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">      <span class="built_in">cout</span>&lt;&lt;<span class="string">"============================================================================================================"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//==========================主程序================================================== </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    BiTree T;</span><br><span class="line">    menu(); </span><br><span class="line">    <span class="keyword">int</span> choice; </span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"--------------------&gt; 输入你的操作码 &lt;--------------------"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;choice;</span><br><span class="line">    <span class="keyword">switch</span>(choice)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"先序遍历输入(以#结束):"</span>;  </span><br><span class="line">    CreateBiTree(T);  </span><br><span class="line">   <span class="built_in">cout</span>&lt;&lt;<span class="string">"创建成功"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"中序遍历"</span>&lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line">    InOrderTraverse(T);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"先序遍历"</span>&lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line">    PreOrderTraverse(T);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"后序遍历"</span>&lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line">    PostOrderTraverse(T);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">     <span class="built_in">cout</span>&lt;&lt;<span class="string">"层次遍历"</span>&lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line">    PrintAtLevel(T);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"叶子节点的个数为："</span>&lt;&lt;LeafCount(T)&lt;&lt;<span class="built_in">endl</span>;;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">7</span>: </span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"二叉树的深度为："</span>&lt;&lt;Depth(T)&lt;&lt;<span class="built_in">endl</span>;;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"交换所有的左右子树"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    exchange(T);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><p><img src="/2018/07/03/二叉树的基本操作/1.png" alt="1"></p>]]></content>
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树，算法，数据结构 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>LeetCode-No.3 无重复字符的最长字串</title>
      <link href="/2018/07/03/LeetCode-No-3-%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%97%E4%B8%B2/"/>
      <url>/2018/07/03/LeetCode-No-3-%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%97%E4%B8%B2/</url>
      <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">给定一个字符串，找出不含有重复字符的最长子串的长度。</span><br></pre></td></tr></table></figure><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">给定 <span class="string">"abcabcbb"</span> ，没有重复字符的最长子串是 <span class="string">"abc"</span> ，那么长度就是<span class="number">3</span>。</span><br><span class="line"></span><br><span class="line">给定 <span class="string">"bbbbb"</span> ，最长的子串就是 <span class="string">"b"</span> ，长度是<span class="number">1</span>。</span><br><span class="line"></span><br><span class="line">给定 <span class="string">"pwwkew"</span> ，最长子串是 <span class="string">"wke"</span> ，长度是<span class="number">3</span>。请注意答案必须是一个子串，<span class="string">"pwke"</span> 是 子序列  而不是子串。</span><br></pre></td></tr></table></figure><h1 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CleanMak</span><span class="params">(<span class="keyword">int</span> t[] ,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">   &#123;</span><br><span class="line">     t[i]=<span class="number">-1</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(<span class="built_in">string</span> s)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line">   <span class="keyword">int</span> Tmpmax=<span class="number">0</span>;</span><br><span class="line">   <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">   <span class="keyword">int</span> MaskTable[<span class="number">200</span>];</span><br><span class="line">   </span><br><span class="line">   CleanMak(MaskTable,<span class="number">200</span>);</span><br><span class="line">   <span class="keyword">int</span> preStep=<span class="number">0</span>; </span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.size();i++) </span><br><span class="line">   &#123;</span><br><span class="line">     <span class="keyword">if</span>(MaskTable[(<span class="keyword">int</span>)s[i]]==<span class="number">-1</span>)</span><br><span class="line">     &#123;</span><br><span class="line">      MaskTable[(<span class="keyword">int</span>)s[i]]=i;</span><br><span class="line">      count+=<span class="number">1</span>;  </span><br><span class="line">       <span class="keyword">if</span>(count&gt;Tmpmax)</span><br><span class="line">     &#123;</span><br><span class="line">     Tmpmax=count;</span><br><span class="line">     &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">else</span></span><br><span class="line">     &#123; </span><br><span class="line">    count=<span class="number">0</span>; </span><br><span class="line">    i=MaskTable[(<span class="keyword">int</span>)s[i]]; </span><br><span class="line">    CleanMak(MaskTable,<span class="number">200</span>);  </span><br><span class="line">     &#125; </span><br><span class="line">   &#125; </span><br><span class="line">   <span class="keyword">return</span> Tmpmax;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     <span class="built_in">string</span> s=<span class="string">"abak"</span>;    </span><br><span class="line"> <span class="built_in">cout</span>&lt;&lt;lengthOfLongestSubstring(s)&lt;&lt;<span class="built_in">endl</span>;                                   </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>滑动窗口了解一下，可以参考</p><p><a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/solution/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/solution/</a></p>]]></content>
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>LeetCode-No.2 两数相加</title>
      <link href="/2018/07/02/LeetCode-No-2-%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/"/>
      <url>/2018/07/02/LeetCode-No-2-%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/</url>
      <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">给定两个非空链表来表示两个非负整数。位数按照逆序方式存储，它们的每个节点只存储单个数字。将两数相加返回一个新的链表。</span><br><span class="line"></span><br><span class="line">你可以假设除了数字 <span class="number">0</span> 之外，这两个数字都不会以零开头。</span><br></pre></td></tr></table></figure><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：(<span class="number">2</span> -&gt; <span class="number">4</span> -&gt; <span class="number">3</span>) + (<span class="number">5</span> -&gt; <span class="number">6</span> -&gt; <span class="number">4</span>)</span><br><span class="line">输出：<span class="number">7</span> -&gt; <span class="number">0</span> -&gt; <span class="number">8</span></span><br><span class="line">原因：<span class="number">342</span> + <span class="number">465</span> = <span class="number">807</span></span><br></pre></td></tr></table></figure><h1 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">  </span><br><span class="line"> <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> &#123;</span></span><br><span class="line"> <span class="keyword">int</span> val;</span><br><span class="line"> ListNode *next;</span><br><span class="line"> ListNode(<span class="keyword">int</span> x) : val(x), next(<span class="literal">NULL</span>) &#123;&#125;</span><br><span class="line"> &#125;;</span><br><span class="line"> <span class="comment">//链表打印 </span></span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(ListNode* head)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(head!=<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;head-&gt;val&lt;&lt;<span class="string">"  "</span>;</span><br><span class="line">head=head-&gt;next; </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//与题无关，单链表转置 </span></span><br><span class="line"><span class="function">ListNode*  <span class="title">Reverse</span><span class="params">(ListNode* Target)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ListNode* tmpNode=Target-&gt;next;</span><br><span class="line">Target-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">ListNode* p=Target;</span><br><span class="line">Target=tmpNode;</span><br><span class="line"><span class="keyword">while</span>(Target!=<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">tmpNode=Target-&gt;next;</span><br><span class="line">Target-&gt;next=p;</span><br><span class="line">p=Target;</span><br><span class="line">Target=tmpNode;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ListNode* <span class="title">addTwoNumbers</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">     ListNode* result=<span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">     ListNode* result2=result;</span><br><span class="line">     ListNode* head=result;</span><br><span class="line">     <span class="keyword">int</span> num1=<span class="number">0</span>,num2=<span class="number">0</span>,num3;</span><br><span class="line">     </span><br><span class="line">      <span class="keyword">int</span> level=<span class="number">1</span>; </span><br><span class="line">      <span class="keyword">int</span> jinwei=<span class="number">0</span>;</span><br><span class="line">      ListNode* newnode; </span><br><span class="line">      result-&gt;val=  (((l1-&gt;val+l2-&gt;val+jinwei)%<span class="number">10</span>));   </span><br><span class="line">  jinwei=(l1-&gt;val+l2-&gt;val+jinwei)/<span class="number">10</span>; </span><br><span class="line">      l1=l1-&gt;next;</span><br><span class="line">  l2=l2-&gt;next; </span><br><span class="line"></span><br><span class="line">     <span class="keyword">while</span>(l1!=<span class="literal">NULL</span>&amp;&amp;l2!=<span class="literal">NULL</span>)</span><br><span class="line">     &#123; </span><br><span class="line">        newnode= <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">     newnode-&gt;val=(((l1-&gt;val+l2-&gt;val+jinwei)%<span class="number">10</span>)); </span><br><span class="line">     jinwei=(l1-&gt;val+l2-&gt;val+jinwei)/<span class="number">10</span>;</span><br><span class="line">result-&gt;next=newnode; </span><br><span class="line">result=newnode;   </span><br><span class="line">l1=l1-&gt;next;</span><br><span class="line">l2=l2-&gt;next; </span><br><span class="line">     &#125;  </span><br><span class="line">     <span class="keyword">if</span>(l1!=<span class="literal">NULL</span>)</span><br><span class="line">     &#123;</span><br><span class="line">     l2=l1;</span><br><span class="line">     &#125;  </span><br><span class="line">     <span class="keyword">while</span>(l2!=<span class="literal">NULL</span>)</span><br><span class="line">     &#123;</span><br><span class="line">        newnode= <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">     newnode-&gt;val=(((l2-&gt;val+jinwei)%<span class="number">10</span>));  </span><br><span class="line">     jinwei=(l2-&gt;val+jinwei)/<span class="number">10</span>;</span><br><span class="line">result-&gt;next=newnode; </span><br><span class="line">result=newnode;  </span><br><span class="line">    l2=l2-&gt;next;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span>(jinwei!=<span class="number">0</span>)</span><br><span class="line">     &#123;</span><br><span class="line">        newnode= <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">     newnode-&gt;val=jinwei;  </span><br><span class="line">result-&gt;next=newnode;  </span><br><span class="line">     &#125; </span><br><span class="line">     test(result2);</span><br><span class="line">     <span class="keyword">return</span> result2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     ListNode* l1=<span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">     ListNode* ll=l1;</span><br><span class="line">     l1-&gt;val=<span class="number">2</span>;</span><br><span class="line">     </span><br><span class="line">     ListNode* tmp=<span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">     tmp-&gt;val=<span class="number">4</span>;</span><br><span class="line">     tmp-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">     l1-&gt;next=tmp;</span><br><span class="line">     l1=tmp;</span><br><span class="line">     </span><br><span class="line">      tmp=<span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">     tmp-&gt;val=<span class="number">3</span>;</span><br><span class="line">     tmp-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">     l1-&gt;next=tmp;</span><br><span class="line">     l1=tmp; </span><br><span class="line">      </span><br><span class="line">     </span><br><span class="line">     ListNode* l2=<span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">     ListNode* ll2=l2;</span><br><span class="line">     l2-&gt;val=<span class="number">5</span>; </span><br><span class="line">     </span><br><span class="line">      tmp=<span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">     tmp-&gt;val=<span class="number">6</span>;</span><br><span class="line">     tmp-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">     l2-&gt;next=tmp;</span><br><span class="line">     l2=tmp;</span><br><span class="line">     </span><br><span class="line">     tmp=<span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">     tmp-&gt;val=<span class="number">4</span>;</span><br><span class="line">       tmp-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">     l2-&gt;next=tmp;</span><br><span class="line">     l2=tmp;</span><br><span class="line">      </span><br><span class="line">    test(ll);</span><br><span class="line">      test(ll2); </span><br><span class="line">  ListNode* l3=addTwoNumbers(ll,ll2); </span><br><span class="line"><span class="keyword">return</span>  <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>C++中ListNode</p><p>结构</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> &#123;</span></span><br><span class="line">      <span class="keyword">int</span> val;  <span class="comment">//当前结点的值</span></span><br><span class="line">      ListNode *next;  <span class="comment">//指向下一个结点的指针</span></span><br><span class="line">      ListNode(<span class="keyword">int</span> x) : val(x), next(<span class="literal">NULL</span>) &#123;&#125;  <span class="comment">//初始化当前结点值为x,指针为空</span></span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><p>常见操作</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">ListNode* temp1 = <span class="keyword">new</span> Solution::ListNode(<span class="number">0</span>); <span class="comment">//创建新元素，</span></span><br><span class="line">ListNode* l1 = temp1; <span class="comment">//最后的结果l1指向temp1，这样可以获取temp所接收的全部元素，而temp的指针由于每次都往下移，所以每次都更新</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> ((c = getchar()) != <span class="string">'\n'</span>)   <span class="comment">//以空格区分各个结点的值</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (c != <span class="string">' '</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                ungetc(c, <span class="built_in">stdin</span>);  <span class="comment">//把不是空格的字符丢回去</span></span><br><span class="line">                <span class="built_in">cin</span> &gt;&gt; num;</span><br><span class="line">                Solution::ListNode* newnode = <span class="keyword">new</span> Solution::ListNode(<span class="number">0</span>);</span><br><span class="line">                newnode-&gt;val = num;<span class="comment">//创建新的结点存放键盘中读入的值</span></span><br><span class="line">                newnode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">                temp2-&gt;next = newnode;<span class="comment">//并将其赋值给temp2</span></span><br><span class="line">                temp2 = newnode; <span class="comment">//此处也可以写成  temp2=temp2-&gt;next,使指针指向下一个，以待接收新元素</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span>  Solution::reversePrintListNode(ListNode* head)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">     <span class="built_in">cout</span> &lt;&lt; head-&gt;val; <span class="comment">//顺序输出</span></span><br><span class="line">    reversePrintListNode(head-&gt;next);  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; head-&gt;val; <span class="comment">//逆序输出</span></span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大数问题，单链表提供了一种解决方案</p>]]></content>
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>LeetCode-No.1两数之和</title>
      <link href="/2018/07/02/LeetCode-No-1%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
      <url>/2018/07/02/LeetCode-No-1%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
      <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> 给定一个整数数组和一个目标值，找出数组中和为目标值的两个数。</span><br><span class="line"></span><br><span class="line">你可以假设每个输入只对应一种答案，且同样的元素不能被重复利用。</span><br></pre></td></tr></table></figure><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">给定 nums = [2, 7, 11, 15], target = 9</span><br><span class="line"></span><br><span class="line">因为 nums[0] + nums[1] = 2 + 7 = 9</span><br><span class="line">所以返回 [0, 1]</span><br></pre></td></tr></table></figure><h1 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; twoSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; result;</span><br><span class="line"><span class="keyword">bool</span> flg=<span class="literal">false</span>; </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.size();i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;nums.size();j++)</span><br><span class="line">&#123; </span><br><span class="line"><span class="keyword">if</span>(nums[i]+nums[j]==target)</span><br><span class="line">&#123;</span><br><span class="line">result.push_back(i);</span><br><span class="line">    result.push_back(j);</span><br><span class="line">    flg=<span class="literal">true</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flg)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flg)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nums;</span><br><span class="line">    nums.push_back(<span class="number">1</span>);</span><br><span class="line">    nums.push_back(<span class="number">2</span>);</span><br><span class="line">    nums.push_back(<span class="number">3</span>);</span><br><span class="line">    nums.push_back(<span class="number">6</span>);</span><br><span class="line">     <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; re=twoSum(nums,<span class="number">5</span>); </span><br><span class="line"><span class="keyword">return</span>  <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>Vectotr序列容器介绍</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.vector是表示可变大小数组的序列容器。</span><br><span class="line">就像数组一样，vector也采用的连续存储空间来存储元素。也就是意味着可以采用下标对vector的元素进行访问，和数组一样高效。但是又不像数组，它的大小是可以动态改变的，而且它的大小会被容器自动处理。</span><br><span class="line">本质讲，vector使用动态分配数组来存储它的元素。当新元素插入时候，这个数组需要被重新分配大小为了增加存储空间。其做法是，分配一个新的数组，然后将全部元素移到这个数组。就时间而言，这是一个相对代价高的任务，因为每当一个新的元素加入到容器的时候，vector并不会每次都重新分配大小。</span><br><span class="line">vector分配空间策略：vector会分配一些额外的空间以适应可能的增长，因为存储空间比实际需要的存储空间更大。不同的库采用不同的策略权衡空间的使用和重新分配。但是无论如何，重新分配都应该是对数增长的间隔大小，以至于在末尾插入一个元素的时候是在常数时间的复杂度完成的。</span><br><span class="line">因此，vector占用了更多的存储空间，为了获得管理存储空间的能力，并且以一种有效的方式动态增长。</span><br><span class="line">与其它动态序列容器相比（deques, lists and forward_lists）， vector在访问元素的时候更加高效，在末尾添加和删除元素相对高效。对于其它不在末尾的删除和插入操作，效率更低。比起lists和forward_lists统一的迭代器和引用更好。</span><br></pre></td></tr></table></figure><p>头文件</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br></pre></td></tr></table></figure><p>操作</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">声明及初始化：</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec;        <span class="comment">//声明一个int型向量</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec(<span class="number">5</span>);     <span class="comment">//声明一个初始大小为5的int向量</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec(<span class="number">10</span>, <span class="number">1</span>); <span class="comment">//声明一个初始大小为10且值都是1的向量</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec(tmp);   <span class="comment">//声明并用tmp向量初始化vec向量</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tmp(vec.begin(), vec.begin() + <span class="number">3</span>);  <span class="comment">//用向量vec的第0个到第2个值初始化tmp</span></span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">5</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;   </span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec(arr, arr + <span class="number">5</span>);      <span class="comment">//将arr数组的元素用于初始化vec向量</span></span><br><span class="line"><span class="comment">//说明：当然不包括arr[4]元素，末尾指针都是指结束元素的下一个元素，</span></span><br><span class="line"><span class="comment">//这个主要是为了和vec.end()指针统一。</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec(&amp;arr[<span class="number">1</span>], &amp;arr[<span class="number">4</span>]); <span class="comment">//将arr[1]~arr[4]范围内的元素作为vec的初始值</span></span><br><span class="line">常用操作</span><br><span class="line">向量大小： vec.size();</span><br><span class="line">向量最大容量： vec.max_size();</span><br><span class="line">更改向量大小： vec.resize();</span><br><span class="line">向量真实大小： vec.capacity();</span><br><span class="line">向量判空： vec.empty();</span><br><span class="line">减少向量大小到满足元素所占存储空间的大小： vec.shrink_to_fit()</span><br><span class="line">多个元素赋值： vec.assign(); <span class="comment">//类似于初始化时用数组进行赋值</span></span><br><span class="line">末尾添加元素： vec.push_back();</span><br><span class="line">末尾删除元素： vec.pop_back();</span><br><span class="line">任意位置插入元素： vec.insert();</span><br><span class="line">任意位置删除元素： vec.erase();</span><br><span class="line">交换两个向量的元素： vec.swap();</span><br><span class="line">清空向量元素： vec.clear();</span><br><span class="line">开始指针：vec.begin();</span><br><span class="line">末尾指针：vec.end(); <span class="comment">//指向最后一个元素的下一个位置</span></span><br><span class="line">指向常量的开始指针： vec.cbegin(); <span class="comment">//意思就是不能通过这个指针来修改所指的内容，但还是可以通过其他方式修改的，而且指针也是可以移动的。</span></span><br><span class="line">指向常量的末尾指针： vec.cend();</span><br><span class="line">下标访问： vec[<span class="number">1</span>]; <span class="comment">//并不会检查是否越界</span></span><br><span class="line">at方法访问： vec.at(<span class="number">1</span>); <span class="comment">//以上两者的区别就是at会检查是否越界，是则抛出out of range异常</span></span><br><span class="line">访问第一个元素： vec.front();</span><br><span class="line">访问最后一个元素： vec.back();</span><br><span class="line">返回一个指针： <span class="keyword">int</span>* p = vec.data(); <span class="comment">//可行的原因在于vector在内存中就是一个连续存储的数组，所以可以返回一个指针指向这个数组。这是是C++11的特性。</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/06/07/index/"/>
      <url>/2018/06/07/index/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PX4 Makefile语法</title>
      <link href="/2018/05/22/PX4-Makefile%E8%AF%AD%E6%B3%95/"/>
      <url>/2018/05/22/PX4-Makefile%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">     本小节给出Makefile文件中使用到部分语法的简单说明，如果想要完全理解、读懂、甚至编写Makefile，需要仔细阅读《GNU Makefile 中文手册》。</span><br><span class="line"></span><br><span class="line">：=                     --直接式变量展开，引用的变量或者函数都会被其定义值替换，如果：= 右端为空，可能是赋值了一个空格；</span><br><span class="line"> = 及 define        --递归式变量展开，在引用处只是文本替换，在使用时才会展开；    </span><br><span class="line">$                         --取变量值操作，可以嵌套使用，例如$($(X))。同时可以用于调用内嵌函数:$（FCTION ARGUMENTS）；</span><br><span class="line">？=                     --条件赋值，只有变量尚未被赋值的情况下，才能将？=后边的值赋给变量；</span><br><span class="line">patsubst             --模式替换，引用格式:$(patsubst A,B,(VAR)), VAR表示变量，下同，例如：$(patsubst %.c %.o, a.c,b.c)；</span><br><span class="line">wildcard             --通用符，引用格式如:$(wildcard *.c)，当前路径下的所有.c结尾的文件；</span><br><span class="line">+=                      --追加赋值，VAR定义时给一个基本值，+=就在原来的变量基础上增加一 个赋值，注意不是覆盖；</span><br><span class="line">%                        --模式字符，例如：%.c 表示后缀为.c模式的文件；</span><br><span class="line">ifeq、ifneq         --条件判断关键字;</span><br><span class="line">ifdef、ifndef       --条件判断关键字；</span><br><span class="line"><span class="comment">// +                     --命令行前使用+，表示；</span></span><br><span class="line">subset                --字符串替换，例如：$(subst,e,E,feet),结果为：fEEt；</span><br><span class="line">filter                   --过滤函数，例如：$(filter %.c %.s, $（VAR）),返回VAR中所有后缀为.c,.s的文件；</span><br><span class="line">sort                    --将字符串升序排列，并去掉重复单词；</span><br><span class="line">word                  --取单词函数，$(word <span class="number">1</span>, text),取text的第<span class="number">1</span>个单词；</span><br><span class="line">wordlist             --取字符串函数，$(word <span class="number">1</span>,<span class="number">5</span>， text)表示取text的第<span class="number">1</span>个到第<span class="number">5</span>个单词字串；</span><br><span class="line">words                --统计字符串中单词数目；</span><br><span class="line">firstword           --取字符串的第一个单词，lastword同理取最后一个单词；</span><br><span class="line">dir                     --取目录，包含指定文件的路径目录；</span><br><span class="line">basename         --取前缀函数，例如 $(basename src/foo.c),返回值为src/foo；</span><br><span class="line">foreach             --循环执行；</span><br><span class="line">call                    --实现用户自定义函数的引用，$（call 函数，参数<span class="number">1</span>,参数<span class="number">2</span>,...）;</span><br><span class="line"><span class="meta">@echo</span>              --在界面上输出build信息；</span><br><span class="line">eval                   --比较复杂，没看懂，构造一个依赖关系链，其主要功能是根据参 数关系、结构，对它们进行替换展开；</span><br><span class="line">shell                  --大致功能是将shell的参数放入shell环境中执行并返回结果；</span><br><span class="line">error                 --$(error TEXT...),返回错误信息并退出执行；</span><br><span class="line">MAKECMDGOALS</span><br><span class="line">                         -（用户输入的）命令行参数；</span><br><span class="line">$@                    -表示规则的目标文件名，一般与改符号上文中的文件相对应，例如前边出现.C，可能默认就是对应的.O文件</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 手册 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PX4 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PX4学习(一)之坏境搭建</title>
      <link href="/2018/05/20/PX4%E5%AD%A6%E4%B9%A0-%E4%B8%80-%E4%B9%8B%E5%9D%8F%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2018/05/20/PX4%E5%AD%A6%E4%B9%A0-%E4%B8%80-%E4%B9%8B%E5%9D%8F%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      <content type="html"><![CDATA[<p>一概念介绍</p><p>​    PX4是独立于平台的自动驾驶软件（或软件堆栈/固件），可以飞行或驾驶无人驾驶飞行器或地面车辆（UAV / UGV）。它装载（闪存）在某些<a href="https://docs.px4.io/en/getting_started/flight_controller_selection.html" target="_blank" rel="noopener">车辆控制硬件上</a>，并与地面控制站一起构成完全自主的自动驾驶系统。</p><p>PX4地面控制站称为 <a href="http://qgroundcontrol.com/" target="_blank" rel="noopener">QGroundControl</a>，是PX4自动驾驶仪系统的组成部分。QGroundControl可以在Windows，OS X或Linux上运行。我从<a href="http://qgroundcontrol.com/downloads/" target="_blank" rel="noopener">这里</a>下载并安装QGroundControl 。在QGroundControl的帮助下，您可以将PX4加载（闪存）到<a href="https://docs.px4.io/en/getting_started/flight_controller_selection.html" target="_blank" rel="noopener">车辆控制硬件</a>，您可以设置车辆，更改不同参数，获取实时航班信息，并创建并执行完全自主化的任务。</p><p>一安装软件</p><p>CMake、Java jre</p><p>jdk</p><p>PX4 Toolchain Installer</p>]]></content>
      
      <categories>
          
          <category> github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PX4 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Excel导入Matlab数值全为NAN解决方案</title>
      <link href="/2018/04/19/Excel%E5%AF%BC%E5%85%A5Matlab%E6%95%B0%E5%80%BC%E5%85%A8%E4%B8%BANAN%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>/2018/04/19/Excel%E5%AF%BC%E5%85%A5Matlab%E6%95%B0%E5%80%BC%E5%85%A8%E4%B8%BANAN%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      <content type="html"><![CDATA[<p>最近在利用Matlab做来训练BP神经网络的时候遇见了一个问题。</p><p>当我在数据库里将原始数据进行一定预处理后，重新导出到excel，并把导出的excel导入matlab中，过程很顺利，但当我在matlab中查看我导入后的数据时，竟然满眼的NAN,</p><p><img src="/2018/04/19/Excel导入Matlab数值全为NAN解决方案/1.png" alt="2"></p><p>amazing！</p><p>直觉告诉我肯定是数据格式的问题。</p><p>1.首先NAN=Not a number，既然不是数值类型，那我先找到Excel的数据，将数据全部改为数值类型，但是Fail！我用求和格式对数据进行求和来验证是否是数值类型，如果能正常求和，那肯定是数据类型无疑，但是百度了很多将excel数据变为数值的方法，最后结果都是Fail。</p><p>2.既然excel这边没办法解决，我就在上一个环节数据库导出这边进行尝试解决问题。</p><p>我尝试着将Navchar格式改为float类型，忽略警告</p><p> <img src="/2018/04/19/Excel导入Matlab数值全为NAN解决方案/2.png" alt="2"></p><p>但是还是报错</p><p><img src="/2018/04/19/Excel导入Matlab数值全为NAN解决方案/3.png" alt="3"></p><p>没办法，Fail</p><p>然后我分析数据库里的数据，发现问题所在。</p><p><img src="/2018/04/19/Excel导入Matlab数值全为NAN解决方案/4.png" alt=""></p><p>问题就出现在这个未知的空符号（不是空格），然后我用replace，ltrim，rtrim等方法试图去掉这个位置的空符号，还是依旧存在。</p><p>内事不决问百度，外事不决问谷歌，在各种途径的搜索下终于找到一种解决方案。</p><p>首先，将excel的数据数据类型全部设置为文本类型。</p><p>其次，导入到数据库，修改数据库的表设计，将navarchar或varchar改为float类型，再重新导出即可，就是这么简单。</p>]]></content>
      
      <categories>
          
          <category> Error_handling </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maltab </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>BP神经网络学习笔记</title>
      <link href="/2018/04/04/BP%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/04/04/BP%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h1 id="一CDF-累积分布函数图作用"><a href="#一CDF-累积分布函数图作用" class="headerlink" title="一CDF 累积分布函数图作用"></a>一CDF 累积分布函数图作用</h1><p>定义：对<a href="http://baike.baidu.com/view/150456.htm" target="_blank" rel="noopener">连续函数</a>，所有小于等于a的值，其出现概率的和。F(a)=P(x&lt;=a)</p><p>数据的累积分布，也即小于等于当前数据值的所有数据的概率分布，对于表示数据点在某个区间内出现的概率有很大的帮助。</p><p>根据这张累积分布函数图（无图），可以很方便地回答之前的两个问题：</p><ol><li>CDF中横轴上的2对应的Y值约为0.98，因此所有大于2的数据点所占比例约为2%。</li><li>CDF中横轴上的1.3对应的Y值约为0.75，因此所有介于1.3和2之间的数据点所占比例约为23% (0.98-0.75)。</li></ol><p>与直方图、核密度估计相比，累积分布函数存在以下几个特点：</p><ul><li>累积分布函数是X轴单调递增函数。</li><li>累积分布函数更加平滑，图像中噪音更小。</li><li>累积分布函数没有引入带宽等外部概念，因此不会丢失任何数据信息。对于给定的数据集，累积分布函数是唯一的。</li><li>累积分布函数一般都经过归一化处理，单调递增且趋近于1。</li></ul>]]></content>
      
      
        <tags>
            
            <tag> NN </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>我的简历</title>
      <link href="/2018/04/02/%E6%88%91%E7%9A%84%E7%AE%80%E5%8E%86/"/>
      <url>/2018/04/02/%E6%88%91%E7%9A%84%E7%AE%80%E5%8E%86/</url>
      <content type="html"><![CDATA[<h3 id="一-基本信息"><a href="#一-基本信息" class="headerlink" title="一 基本信息"></a>一 基本信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">姓    名：徐志翔   </span><br><span class="line">原    籍：江苏南京</span><br><span class="line">目前所在：南京</span><br><span class="line">电    话：13770330366</span><br><span class="line">电子信箱：dreamcore@126.com </span><br><span class="line">英语等级：六级</span><br></pre></td></tr></table></figure><h3 id="二项目经验"><a href="#二项目经验" class="headerlink" title="二项目经验"></a>二项目经验</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  《基于LPC1768和CC2530的智能家居设计》      独立完成</span><br><span class="line">  《基于ASP.NET的翔宇学院竞赛管理系统》       负责前台和部分后台</span><br><span class="line">   《基于路况分析的智能路灯物联网系统》          负责STC89C52主控部分</span><br><span class="line">   《基于opencv3的车标识别》校大学生创新项目    负责识别部分</span><br><span class="line">   《基于.NET的毕业审核系统》                   独立完成</span><br><span class="line">   《基于STC89C52的智能小车设计》              独立完成</span><br><span class="line">   《基于RFID门禁系统设计》                    独立完成</span><br></pre></td></tr></table></figure><h3 id="三获奖经历"><a href="#三获奖经历" class="headerlink" title="三获奖经历"></a>三获奖经历</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">2014，2015年获国家励志奖学金</span><br><span class="line">2014年江苏省十八届省运会“优秀志愿者”                                </span><br><span class="line">2014年获江苏省大学生暑期社会实践“先进个人”</span><br><span class="line">2015年获全国大学生物联网设计竞赛华东区特等奖，全国三等奖</span><br><span class="line">2015年江苏省“互联网+”大学生创新创业大赛创意组三等奖</span><br><span class="line">获校科技活动奖，校三好学生 ,校二等奖学金三次，校编程大赛一等奖，优秀导生      </span><br><span class="line">江苏省蓝桥杯大赛C/C++三等奖                 </span><br><span class="line">省级大学生创新项目，成功结题，并获得团体软件专利权一项。</span><br></pre></td></tr></table></figure><h3 id="Dividual-Works"><a href="#Dividual-Works" class="headerlink" title="Dividual Works*"></a><strong>Dividual Works*</strong></h3><h4 id="总体设计"><a href="#总体设计" class="headerlink" title="总体设计"></a>总体设计</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">本设计采用“物物相连”的物联网思想作为设计理念，搭建了一个基于LPC1768的智能家居网关系统。本次设计包括的模块有ZigBee数据采集模块、ZigBee数据汇聚模块、网关 模块、服务器端模块、PC客户端模块、APP模块等六大模块。主要实现的具体功能有，PC客户端可以通过与远程服务器端中的数据库交互显示当前ZigBee节点采集的数据以及通过对数据库反馈控制ZigBee终端，使用户可以实时通过客户端检测家里的情况并可以加以控制。同样的操作也可以通过APP控制实现。PC机与ZigBee终端节点之间的通信和APP与ZigBee终端节点之间的通信，都需要经过网关进行转接，因此网关是整个系统的通信桥梁。为了实现网关通信桥梁的角色，本次网关的设计，硬件上采用恩智浦公司的LPC1768作为主控MCU，该系统由LPC1768内嵌以太网模块和LAN8720A芯片构建一个以太网服务控制器，即搭建成一个网关系统。软件上将成功将RL-TCPnet的协议栈移植到目标板上，实现了与远程服务器socket通信的能力。通过设计相关的PC客户端及APP手机端，即PC机终端和手机终端，实现了“使用方便”的设计理念，数据采集实现了“贴近生活”设计理念，从而搭建成一个物联网的智能家居网关系统。</span><br></pre></td></tr></table></figure><h4 id="图片展示"><a href="#图片展示" class="headerlink" title="图片展示"></a>图片展示</h4><p> <img src="/2018/04/02/我的简历/1.jpg" alt="1"></p><p>图一：Zigbee协调器+嵌入式网关（LPC1768）</p><p> <img src="/2018/04/02/我的简历/2.png" alt="2"></p><p>PC客户端 </p><p> <img src="/2018/04/02/我的简历/3.jpg" alt="3"></p><p>远程服务器处理程序</p><p>  <img src="/2018/04/02/我的简历/4.png" alt="4"></p><p>android客户端</p><p> <img src="/2018/04/02/我的简历/5.jpg" alt="5"></p><p>Zigbee终端+传感器采集数据</p><h3 id="智能办公系统"><a href="#智能办公系统" class="headerlink" title="智能办公系统"></a>智能办公系统</h3><p> <img src="/2018/04/02/我的简历/6.png" alt="6"></p><p>应用框图<em>**</em></p><p> <img src="/2018/04/02/我的简历/7.png" alt="7"></p><p>通信框架</p>]]></content>
      
      <categories>
          
          <category> Personal </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>gradient-descent</title>
      <link href="/2018/03/29/gradient-descent/"/>
      <url>/2018/03/29/gradient-descent/</url>
      <content type="html"><![CDATA[<p>这种算法可以使代价函数最小化，用来优化参数（多个参数）。</p><h1 id="1-普及概念"><a href="#1-普及概念" class="headerlink" title="1.普及概念"></a>1.普及概念</h1><h2 id="1-1何为梯度"><a href="#1-1何为梯度" class="headerlink" title="1.1何为梯度"></a>1.1何为梯度</h2><p><strong>梯度:</strong> 运算的对像是纯量,运算出来的结果会是向量在一个标量场中,梯度的计算结果会是”在每个位置都算出一个向量,而这个向量的方向会是在任何一点上从其周围梯度的计算结果会是”在每个位置都算出一个向量,而这个向量的方向会是在任何一点上从其周围的大小会是上面所说的那个最小与最大的差距程度”。举例子来讲会比较简单,如果现在的纯量场用一座山来表示,纯量值越大的地方越高,反之则越低.经过梯度这个运操作数的运算以后,会在这座山的每一个点上都算出一个向量,这个向量会指向每个点最陡的那个方向,而向量的大小则代表了这个最陡的方向到底有多陡.<strong>几何意义</strong>：  函数z=f(x,y)在点P0处的梯度方向是函数变化率(即方向导数)最大的方向。梯度的方向就是函数f(x,y)在这点<strong>增长最快的方向</strong>，梯度的模为方向导数的最大值。</p>]]></content>
      
      <categories>
          
          <category> Machine-learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gradient-descent </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>无题</title>
      <link href="/2018/03/29/%E6%97%A0%E9%A2%98/"/>
      <url>/2018/03/29/%E6%97%A0%E9%A2%98/</url>
      <content type="html"><![CDATA[<p> <img src="/2018/03/29/无题/4.jpg" alt="4"></p>]]></content>
      
      <categories>
          
          <category> github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github pages处理 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>如何对博文加密处理</title>
      <link href="/2018/03/29/%E5%A6%82%E4%BD%95%E5%AF%B9%E5%8D%9A%E6%96%87%E5%8A%A0%E5%AF%86%E5%A4%84%E7%90%86/"/>
      <url>/2018/03/29/%E5%A6%82%E4%BD%95%E5%AF%B9%E5%8D%9A%E6%96%87%E5%8A%A0%E5%AF%86%E5%A4%84%E7%90%86/</url>
      <content type="html"><![CDATA[<p> <img src="/2018/03/29/如何对博文加密处理/1.jpg" alt="1"></p><p><strong>1</strong>.在<code>themes-&gt;next-&gt;layout-&gt;_partials-&gt;head.swig</code>文件,在以下位置插入这样一段代码：</p><p> <img src="/2018/03/29/如何对博文加密处理/2.png" alt="2"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    (function()&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">'&#123;&#123; page.password &#125;&#125;'</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (prompt(<span class="string">'请输入文章密码'</span>) !== <span class="string">'&#123;&#123; page.password &#125;&#125;'</span>)&#123;</span><br><span class="line">                alert(<span class="string">'密码错误！'</span>);</span><br><span class="line">                history.back();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>2.创建博文</p><p> <img src="/2018/03/29/如何对博文加密处理/3.png" alt="3"></p><p>3.编辑需要加密的文档 <img src="/2018/03/29/如何对博文加密处理/5.png" alt="5"></p><p>4.提交测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo d -g</span><br></pre></td></tr></table></figure><p> <img src="/2018/03/29/如何对博文加密处理/7.png" alt="7"></p><p>输入密码就可以浏览博文。</p>]]></content>
      
      <categories>
          
          <category> github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github pages处理 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>操作日志</title>
      <link href="/2018/03/28/%E9%98%BF%E9%87%8C%E4%B9%8B%E5%8F%8C%E9%AB%98%E9%A2%84%E6%B5%8B-%E6%97%A5%E5%BF%97/"/>
      <url>/2018/03/28/%E9%98%BF%E9%87%8C%E4%B9%8B%E5%8F%8C%E9%AB%98%E9%A2%84%E6%B5%8B-%E6%97%A5%E5%BF%97/</url>
      <content type="html"><![CDATA[<h3 id="一数据准备工作"><a href="#一数据准备工作" class="headerlink" title="一数据准备工作"></a>一数据准备工作</h3><ol><li>为方便数据操作，将txt文件导入sql数据库</li><li>将vid和table_Id设为联合主键唯一标示，合并两个特征表</li></ol><p>Step1：先复制表结构及其内容：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 新表  </span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> 旧表</span><br></pre></td></tr></table></figure><p>Step2：再将另外的一张表合并</p><p>insert into test1 (field1,field2,….) select(field1,field2,….) from test2;</p><ol><li>查询数据集的总人数：57299</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> alloriginaldate.vid   <span class="keyword">from</span> alloriginaldate <span class="keyword">group</span> byalloriginaldate.vid</span><br></pre></td></tr></table></figure><p><img src="/2018/03/28/阿里之双高预测-日志/1.png" alt="1"> </p><p>5.查询数据集中总体检数</p><p><img src="/2018/03/28/阿里之双高预测-日志/2.png" alt="2"></p><h3 id="二数据预处理"><a href="#二数据预处理" class="headerlink" title="二数据预处理"></a>二数据预处理</h3>]]></content>
      
      <categories>
          
          <category> github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github pages处理 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Machine-learning(Andrew Ng)_Summary_Week1</title>
      <link href="/2018/03/27/Machine-learning-Andrew-Ng-Summary-Week1/"/>
      <url>/2018/03/27/Machine-learning-Andrew-Ng-Summary-Week1/</url>
      <content type="html"><![CDATA[<p> <img src="/2018/03/27/Machine-learning-Andrew-Ng-Summary-Week1/1.jpg" alt="machine-learning"></p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="1-Octave"><a href="#1-Octave" class="headerlink" title="1.Octave"></a>1.Octave</h3><h3 id="2-奇异值分解"><a href="#2-奇异值分解" class="headerlink" title="2.奇异值分解"></a>2.奇异值分解</h3><p>SVD，鸡尾酒算法</p><h3 id="3-分类和回归"><a href="#3-分类和回归" class="headerlink" title="3.分类和回归"></a>3.分类和回归</h3><h3 id="4-线性回归问题"><a href="#4-线性回归问题" class="headerlink" title="4.线性回归问题"></a>4.线性回归问题</h3><h3 id="5-梯度下降"><a href="#5-梯度下降" class="headerlink" title="5.梯度下降"></a>5.梯度下降</h3><h3 id="6-轮廓图"><a href="#6-轮廓图" class="headerlink" title="6.轮廓图"></a>6.轮廓图</h3><p>轮廓图的思想非常简单、直观，它是在横坐标上取 p 个点，依次表示各个指标(即变量)；横坐标上则对应各个指标的值(或者经过标准化变换后的值)，然后将每一组数据对应的点依次连接即可。 （一个参数代价函数可以用<strong>均方误差</strong>，</p><p><img src="/2018/03/27/Machine-learning-Andrew-Ng-Summary-Week1/3.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">m：训练样本的个数；</span><br><span class="line"></span><br><span class="line">hθ(x)：用参数θ和x预测出来的y值；</span><br><span class="line"></span><br><span class="line">y：原训练样本中的y值，也就是标准答案</span><br><span class="line"></span><br><span class="line">上角标(i)：第i个样本</span><br></pre></td></tr></table></figure><p>两个参数可以用轮廓图，更多代价函数请参考：<strong><a href="https://www.cnblogs.com/Belter/p/6653773.html" target="_blank" rel="noopener">https://www.cnblogs.com/Belter/p/6653773.html</a></strong>）</p><p><img src="/2018/03/27/Machine-learning-Andrew-Ng-Summary-Week1/4.png" alt="三维图形"></p><p> <img src="/2018/03/27/Machine-learning-Andrew-Ng-Summary-Week1/2.png" alt="二维图形"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">% Contour plot----轮廓图的绘制</span><br><span class="line">figure;</span><br><span class="line"></span><br><span class="line">% Plot J_vals as 15 contours spaced logarithmically between 0.01 and 100</span><br><span class="line"></span><br><span class="line">contour(theta0_vals, theta1_vals, J_vals, logspace(-2, 3, 20))</span><br><span class="line">xlabel(&apos;\theta_0&apos;); ylabel(&apos;\theta_1&apos;);</span><br><span class="line">hold on;</span><br><span class="line">plot(theta(1), theta(2), &apos;rx&apos;, &apos;MarkerSize&apos;, 10, &apos;LineWidth&apos;, 2);</span><br></pre></td></tr></table></figure><p>则如下图上右图所示，在一条等高线上J(θ0，θ1)J(θ0，θ1)相同</p>]]></content>
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Machine-learning </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>学校景致</title>
      <link href="/2018/03/26/%E5%AD%A6%E6%A0%A1%E6%99%AF%E8%87%B4/"/>
      <url>/2018/03/26/%E5%AD%A6%E6%A0%A1%E6%99%AF%E8%87%B4/</url>
      <content type="html"><![CDATA[<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="校园景致"><a href="#校园景致" class="headerlink" title="校园景致"></a>校园景致</h3><p><img src="/2018/03/26/学校景致/2016-03-26/1.png" alt="水杉林"></p><p><img src="/2018/03/26/学校景致/2016-03-26/2.png" alt=""></p><p> <img src="/2018/03/26/学校景致/2016-03-26/3.png" alt=""></p><p><img src="/2018/03/26/学校景致/2016-03-26/4.png" alt=""></p><p><img src="/2018/03/26/学校景致/2016-03-26/5.png" alt=""></p><p><img src="/2018/03/26/学校景致/2016-03-26/6.png" alt=""></p><p><img src="/2018/03/26/学校景致/2016-03-26/7.png" alt=""></p><p><img src="/2018/03/26/学校景致/2016-03-26/8.png" alt=""><img src="/2018/03/26/学校景致/2016-03-26/9.png" alt=""></p><p><img src="/2018/03/26/学校景致/2016-03-26/10.png" alt=""></p><p><img src="/2018/03/26/学校景致/2016-03-26/11.png" alt=""></p>]]></content>
      
      
        <tags>
            
            <tag> school life </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Mon Mar 26 2018 00:00:00 GMT+0800 (中国标准时间)</title>
      <link href="/2018/03/26/2016-03-26/"/>
      <url>/2018/03/26/2016-03-26/</url>
      <content type="html"><![CDATA[<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="校园景致"><a href="#校园景致" class="headerlink" title="校园景致"></a>校园景致</h3><p><img src="/2018/03/26/2016-03-26/1.png" alt="水杉林"></p><p><img src="/2018/03/26/2016-03-26/2.png" alt=""></p><p> <img src="/2018/03/26/2016-03-26/3.png" alt=""></p><p><img src="/2018/03/26/2016-03-26/4.png" alt=""></p><p><img src="/2018/03/26/2016-03-26/5.png" alt=""></p><p><img src="/2018/03/26/2016-03-26/6.png" alt=""></p><p><img src="/2018/03/26/2016-03-26/7.png" alt=""></p><p><img src="/2018/03/26/2016-03-26/8.png" alt=""><img src="/2018/03/26/2016-03-26/9.png" alt=""></p><p><img src="/2018/03/26/2016-03-26/10.png" alt=""></p><p><img src="/2018/03/26/2016-03-26/11.png" alt=""></p>]]></content>
      
      
        <tags>
            
            <tag> school life </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
